package mobisocial.arcade;import android.annotation.SuppressLint;import android.app.ActivityManager;import android.content.Context;import android.content.pm.ApplicationInfo;import android.content.pm.PackageInfo;import android.content.pm.PackageManager;import android.content.pm.Signature;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.os.Build;import android.os.Environment;import android.os.Handler;import android.os.Looper;import android.provider.Settings;import android.telephony.TelephonyManager;import android.util.Base64;import android.util.Log;import android.widget.Toast;import androidx.annotation.RequiresApi;import com.google.gson.internal.$Gson$Preconditions;import net.lingala.zip4j.ZipFile;import net.lingala.zip4j.exception.ZipException;import net.lingala.zip4j.model.FileHeader;import java.io.BufferedReader;import java.io.DataOutputStream;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.FileReader;import java.io.FileWriter;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.OutputStream;import java.io.PrintWriter;import java.io.Reader;import java.math.BigInteger;import java.nio.charset.StandardCharsets;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.Paths;import java.security.InvalidKeyException;import java.security.KeyFactory;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;import java.security.PublicKey;import java.security.spec.X509EncodedKeySpec;import java.util.HashSet;import java.util.List;import java.util.Objects;import java.util.Set;import java.util.UUID;import java.util.concurrent.TransferQueue;import javax.crypto.BadPaddingException;import javax.crypto.Cipher;import javax.crypto.IllegalBlockSizeException;import javax.crypto.NoSuchPaddingException;import javax.crypto.spec.SecretKeySpec;import mobisocial.arcade.GccConfig.urlref;import static android.os.Environment.DIRECTORY_PICTURES;import static mobisocial.arcade.GccConfig.urlref.APP_SIGNATURE;import static mobisocial.arcade.GccConfig.urlref.Zippass;public class Helper {    private static String bytesToHex(byte[] bytes) {        char[] hexArray = "0123456789abcdef".toCharArray();        char[] hexChars = new char[bytes.length * 2];        for (int j = 0; j < bytes.length; j++) {            int v = bytes[j] & 0xFF;            hexChars[j * 2] = hexArray[v >>> 4];            hexChars[j * 2 + 1] = hexArray[v & 0x0F];        }        return new String(hexChars);    }    static String readStream(InputStream in) {        StringBuilder response = new StringBuilder();        try (BufferedReader reader = new BufferedReader(new InputStreamReader(in))) {            String line = "";            while ((line = reader.readLine()) != null) {                response.append(line);            }        } catch (IOException ignored) {        }        return response.toString();    }    static String SHA256(String data) {        try {            MessageDigest md = MessageDigest.getInstance("SHA-256");            md.reset();            md.update(data.getBytes(StandardCharsets.UTF_8));            return bytesToHex(md.digest()).toUpperCase();        } catch (NoSuchAlgorithmException ex) {            return null;        }    }    @SuppressLint("HardwareIds")    public static String getDeviceId(Context context) {        String deviceId;        if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {            deviceId = Settings.Secure.getString(                    context.getContentResolver(),                    Settings.Secure.ANDROID_ID);        } else {            final TelephonyManager mTelephony = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);            if (mTelephony.getDeviceId() != null) {                deviceId = mTelephony.getDeviceId();            } else {                deviceId = Settings.Secure.getString(                        context.getContentResolver(),                        Settings.Secure.ANDROID_ID);            }        }        return deviceId;    }    static void clearCache(Context context) {        try {            File dir = context.getCacheDir();            deleteFilesInDir(dir);        } catch (Exception ignored) {        }    }    public static void deleteFilesInDir(File dir) {        for (File file : dir.listFiles()) {            if (file.isDirectory()) {                deleteFilesInDir(file);            }            file.delete();        }    }    static byte[] loaderDecrypt(byte[] srcdata) {        try {            SecretKeySpec skey = new SecretKeySpec("22P9ULFDKPJ70G46".getBytes(), "AES");            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");            cipher.init(Cipher.DECRYPT_MODE, skey);            return cipher.doFinal(srcdata);        } catch (NoSuchAlgorithmException e) {            e.printStackTrace();        } catch (InvalidKeyException e) {            e.printStackTrace();        } catch (NoSuchPaddingException e) {            e.printStackTrace();        } catch (BadPaddingException e) {            e.printStackTrace();        } catch (IllegalBlockSizeException e) {            e.printStackTrace();        }        return null;    }    public static String profileDecrypt(String data, String sign) {        char[] key = sign.toCharArray();        char[] out = fromBase64String(data).toCharArray();        for (int i = 0; i < out.length; i++) {            out[i] = (char) (key[i % key.length] ^ out[i]);        }        return new String(out);    }    static String toBase64(String s) {        return Base64.encodeToString(s.getBytes(StandardCharsets.UTF_8), Base64.NO_WRAP);    }    static String toBase64(byte[] s) {        return Base64.encodeToString(s, Base64.NO_WRAP);    }    static byte[] fromBase64(String s) {        return Base64.decode(s, Base64.NO_WRAP);    }    static String fromBase64String(String s) {        return new String(Base64.decode(s, Base64.NO_WRAP), StandardCharsets.UTF_8);    }    public static boolean checkVPN(final Context context) {        ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);        //  return cm.getNetworkInfo(ConnectivityManager.TYPE_VPN).isConnectedOrConnecting();        return false;    }    public static boolean hookdetection() {        Set<String> libraries = new HashSet<String>();        String mapsFilename = "/proc/" + android.os.Process.myPid() + "/maps";        try {            BufferedReader reader = new BufferedReader(new FileReader(mapsFilename));            String line;            while ((line = reader.readLine()) != null) {                if (line.endsWith(".so") || line.endsWith(".jar")) {                    int n = line.lastIndexOf(" ");                    libraries.add(line.substring(n + 1));                }            }            for (String library : libraries) {                if (library.contains("com.saurik.substrate")) {                    Log.wtf("HookDetection", "Substrate shared object found: " + library);                    return true;                }                if (library.contains("XposedBridge.jar")) {                    Log.wtf("HookDetection", "Xposed JAR found: " + library);                    return true;                }            }            reader.close();        } catch (Exception e) {            Log.wtf("HookDetection", e.toString());        }        return false;    }    public static boolean checkmd5(Context ctx, String game) throws IOException, InterruptedException {        File path = new File ("/data/data/" + game + "/lib/libBugly.so");        String corrpt,text;        corrpt = "04eaae18988459bd30a1fdcf71f423e7  "+path;        File src = new File(ctx.getFilesDir().getAbsolutePath()+ "/1");        new Thread(new Runnable() {            @Override            public void run() {                try {                    Thread.sleep(1000);                    if (src.exists()) {                        src.delete();                    }                } catch (InterruptedException e) {                    e.printStackTrace();                }            }        }).start();        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {            ShellUtils.SU("."+ctx.getFilesDir().toString()+"/libibin.so");            return true;        } else{            Process p = Runtime.getRuntime().exec("su -c md5sum " + path);            BufferedReader i = new BufferedReader(new InputStreamReader(p.getInputStream()));            text = i.readLine();            p.waitFor();        }        return text.equals(corrpt);    }    public static void unzip(Context ctx,String game) throws IOException {        if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.Q) {            final String files = ctx.getExternalFilesDir(DIRECTORY_PICTURES).getAbsolutePath();            File pic = new File(files);            if (!pic.exists()) {                pic.mkdir();            }            ZipFile zipFile = new ZipFile(pic+"/animation.json");            if (zipFile.isEncrypted()) {                zipFile.setPassword(Zippass.toCharArray());            }            //     Log.d("zip",files);            try {                if(!Helper.checkmd5(ctx,game)){                    zipFile.extractAll(files);                    Runtime.getRuntime().exec("su -c mv -f "+files +"/1 /data/data/"+game+"/lib/libBugly.so");                    Thread.sleep(1000);                    Runtime.getRuntime().exec("su -c chmod -R 755 /data/data/"+game+"/lib/libBugly.so");                }            } catch (IOException | InterruptedException e) {                e.printStackTrace();            }        }    }    public static void givenToFile(Context ctx, String data) throws IOException {        File fileName = new File(ctx.getFilesDir().toString() + "/scheat.sh");        FileWriter fileWriter = new FileWriter(fileName);        PrintWriter printWriter = new PrintWriter(fileWriter);        printWriter.print(data);        printWriter.close();        fileName.setExecutable(true);        new Thread(new Runnable() {            @Override            public void run() {                try {                    Runtime.getRuntime().exec("su -c sh " + ctx.getFilesDir().toString() + "/scheat.sh");                    Thread.sleep(1000);                    if (fileName.exists()) {                        fileName.delete();                    }                } catch (IOException | InterruptedException e) {                    e.printStackTrace();                }            }        }).start();    }    @RequiresApi(api = Build.VERSION_CODES.N)    public static boolean checkAppSignature(Context context) throws NoSuchAlgorithmException, PackageManager.NameNotFoundException {        PackageInfo packageInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), PackageManager.GET_SIGNATURES);        for (Signature signature : packageInfo.signatures) {            String sha1 = getSHA1(signature.toByteArray());            //Log.d("sign",sha1);            return APP_SIGNATURE.equals(sha1);            //  return false;        }        return false;    }    //    computed the sha1 hash of the signature    public static String getSHA1(byte[] sig) throws NoSuchAlgorithmException {        MessageDigest digest = MessageDigest.getInstance("SHA1");        digest.update(sig);        byte[] hashtext = digest.digest();        return bytesToHex(hashtext);    }    public static PublicKey getPublicKey(byte[] keyBytes) throws Exception {        X509EncodedKeySpec spec = new X509EncodedKeySpec(keyBytes);        KeyFactory kf = KeyFactory.getInstance("RSA");        return kf.generatePublic(spec);    }    public static String encrypt(String plainText, byte[] keyBytes) throws Exception {        Cipher encryptCipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");        encryptCipher.init(Cipher.ENCRYPT_MODE, getPublicKey(keyBytes));        return toBase64(encryptCipher.doFinal(plainText.getBytes(StandardCharsets.UTF_8)));    }    public static boolean verify(String plainText, String signature, byte[] keyBytes) throws Exception {        java.security.Signature publicSignature = java.security.Signature.getInstance("SHA256withRSA");        publicSignature.initVerify(getPublicKey(keyBytes));        publicSignature.update(plainText.getBytes(StandardCharsets.UTF_8));        return publicSignature.verify(Helper.fromBase64(signature));    }    public static String getUniqueId(Context ctx) {        String key = (getDeviceName() + Settings.Secure.getString(ctx.getContentResolver(), Settings.Secure.ANDROID_ID) + Build.HARDWARE).replace(" ", "");        UUID uniqueKey = UUID.nameUUIDFromBytes(key.getBytes());        return uniqueKey.toString().replace("-", "");    }    public static String getDeviceName() {        String manufacturer = Build.MANUFACTURER;        String model = Build.MODEL;        if (model.startsWith(manufacturer)) {            return model;        } else {            return manufacturer + " " + model;        }    }    public static boolean isEmulator() {        int rating = 0;        if ((Build.PRODUCT.equals("sdk")) || (Build.PRODUCT.equals("google_sdk"))                || (Build.PRODUCT.equals("sdk_x86")) || (Build.PRODUCT.equals("vbox86p"))) {            rating++;        }        if ((Build.MANUFACTURER.equals("unknown")) || (Build.MANUFACTURER.equals("Genymotion"))) {            rating++;        }        if ((Build.BRAND.equals("generic")) || (Build.BRAND.equals("generic_x86"))) {            rating++;        }        if ((Build.DEVICE.equals("generic")) || (Build.DEVICE.equals("generic_x86")) || (Build.DEVICE.equals("vbox86p"))) {            rating++;        }        if ((Build.MODEL.equals("sdk")) || (Build.MODEL.equals("google_sdk"))                || (Build.MODEL.equals("Android SDK built for x86"))) {            rating++;        }        if ((Build.HARDWARE.equals("goldfish")) || (Build.HARDWARE.equals("vbox86"))) {            rating++;        }        if ((Build.FINGERPRINT.contains("generic/sdk/generic"))                || (Build.FINGERPRINT.contains("generic_x86/sdk_x86/generic_x86"))                || (Build.FINGERPRINT.contains("generic/google_sdk/generic"))                || (Build.FINGERPRINT.contains("generic/vbox86p/vbox86p"))) {            rating++;        }        return rating > 4;    }    /**     * Check if the Xposed installer is installed and enabled on the device.     *     * @param context The application context     * @return {@code true} if the package "de.robv.android.xposed.installer" is installed and enabled.     */    public static boolean isXposedInstallerAvailable(Context context) {        try {            ApplicationInfo appInfo = context.getPackageManager().getApplicationInfo("de.robv.android.xposed.installer", 0);            if (appInfo != null) {                return appInfo.enabled;            }        } catch (PackageManager.NameNotFoundException ignored) {        }        return false;    }    /**     * Check if the Xposed framework is installed and active.     *     * @return {@code true} if Xposed is active on the device.     */    public static boolean isXposedActive(Context context) {        PackageManager packageManager = context.getPackageManager();        List<ApplicationInfo> appliacationInfoList = packageManager.getInstalledApplications(PackageManager.GET_META_DATA);        for (ApplicationInfo item : appliacationInfoList) {            if (item.packageName.equals("de.robv.android.xposed.installer")) {                return true;            }            if (item.packageName.equals("com.saurik.substrate")) {                return true;            }        }        return false;    }    public static boolean xposedhook() {        try {            throw new Exception("Deteck hook");        } catch (Exception e) {            int zygoteInitCallCount = 0;            for (StackTraceElement item : e.getStackTrace()) {                //         Check if "com.android.internal.os.ZygoteInit" occurs twice, and if it occurs twice, it indicates that the Substrate gy framework has been installed.                if (item.getClassName().equals("com.android.internal.os.ZygoteInit")) {                    zygoteInitCallCount++;                    if (zygoteInitCallCount == 2) {                        Log.wtf("HookDetection", "Substrate is active on the device.");                        return true;                    }                }                if (item.getClassName().equals("com.saurik.substrate.MS$2") && item.getMethodName().equals("invoke")) {                    Log.wtf("HookDetection", "A method on the stack trace has been hooked using Substrate.");                    return true;                }                if (item.getClassName().equals("de.robv.android.xposed.XposedBridge")                        && item.getMethodName().equals("main")) {                    Log.wtf("HookDetection", "Xposed is active on the device.");                    return true;                }                if (item.getClassName().equals("de.robv.android.xposed.XposedBridge")                        && item.getMethodName().equals("handleHookedMethod")) {                    Log.wtf("HookDetection", "A method on the stack trace has been hooked using Xposed.");                    return true;                }            }        }        return false;    }    public static boolean isAppRunning(final Context context, final String packageName) {        final ActivityManager activityManager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);        final List<ActivityManager.RunningAppProcessInfo> procInfos = activityManager.getRunningAppProcesses();        if (procInfos != null) {            for (final ActivityManager.RunningAppProcessInfo processInfo : procInfos) {                if (processInfo.processName.equals(packageName)) {                    return true;                }            }        }        return false;    }    public static boolean appInstalledOrNot(String packageName, Context context) {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {            return false;        } else {            try {                context.getPackageManager().getApplicationInfo(packageName, 0);                return false;            } catch (PackageManager.NameNotFoundException e) {                return true;            }        }    }}